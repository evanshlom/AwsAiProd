AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ModelId:
    Type: String
    Default: amazon.titan-text-express-v1
    Description: Bedrock model ID to use

Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'POST, OPTIONS'"

Resources:
  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: !Sub s3://llm-training-data-${AWS::AccountId}/lambda_function.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          MODEL_ID: !Ref ModelId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ConversationHistory"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /chat
            Method: post

  ConversationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConversationHistory
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

Outputs:
  ApiUrl:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/chat"
    Description: API Gateway endpoint URL
  FunctionName:
    Value: !Ref ChatFunction
    Description: Lambda function name